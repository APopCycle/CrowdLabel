/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer from './Answer';

/**
 * The BodyCreateAnswerQuestionsPost model module.
 * @module model/BodyCreateAnswerQuestionsPost
 * @version 0.1.0
 */
class BodyCreateAnswerQuestionsPost {
    /**
     * Constructs a new <code>BodyCreateAnswerQuestionsPost</code>.
     * @alias module:model/BodyCreateAnswerQuestionsPost
     * @param answer {module:model/Answer} 
     */
    constructor(answer) { 
        
        BodyCreateAnswerQuestionsPost.initialize(this, answer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, answer) { 
        obj['answer'] = answer;
    }

    /**
     * Constructs a <code>BodyCreateAnswerQuestionsPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BodyCreateAnswerQuestionsPost} obj Optional instance to populate.
     * @return {module:model/BodyCreateAnswerQuestionsPost} The populated <code>BodyCreateAnswerQuestionsPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BodyCreateAnswerQuestionsPost();

            if (data.hasOwnProperty('answer')) {
                obj['answer'] = Answer.constructFromObject(data['answer']);
            }
            if (data.hasOwnProperty('user_types')) {
                obj['user_types'] = ApiClient.convertToType(data['user_types'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BodyCreateAnswerQuestionsPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BodyCreateAnswerQuestionsPost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BodyCreateAnswerQuestionsPost.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `answer`
        if (data['answer']) { // data not null
          Answer.validateJSON(data['answer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['user_types'])) {
            throw new Error("Expected the field `user_types` to be an array in the JSON data but got " + data['user_types']);
        }

        return true;
    }


}

BodyCreateAnswerQuestionsPost.RequiredProperties = ["answer"];

/**
 * @member {module:model/Answer} answer
 */
BodyCreateAnswerQuestionsPost.prototype['answer'] = undefined;

/**
 * @member {Array.<Object>} user_types
 */
BodyCreateAnswerQuestionsPost.prototype['user_types'] = undefined;






export default BodyCreateAnswerQuestionsPost;

