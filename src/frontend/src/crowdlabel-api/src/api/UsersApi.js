/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailabilityRequest from '../model/AvailabilityRequest';
import AvailabilityResponse from '../model/AvailabilityResponse';
import Email from '../model/Email';
import HTTPValidationError from '../model/HTTPValidationError';
import NewInfo from '../model/NewInfo';
import RegistrationError from '../model/RegistrationError';
import RegistrationRequest from '../model/RegistrationRequest';
import User from '../model/User';

/**
* Users service.
* @module api/UsersApi
* @version 0.1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the availabilityUsersAvailabilityPut operation.
     * @callback module:api/UsersApi~availabilityUsersAvailabilityPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Availability
     * Checks the availability of a username or email. Returns `true` for a field if that field is available, `false` otherwise.
     * @param {module:model/AvailabilityRequest} availabilityRequest 
     * @param {module:api/UsersApi~availabilityUsersAvailabilityPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailabilityResponse}
     */
    availabilityUsersAvailabilityPut(availabilityRequest, callback) {
      let postBody = availabilityRequest;
      // verify the required parameter 'availabilityRequest' is set
      if (availabilityRequest === undefined || availabilityRequest === null) {
        throw new Error("Missing the required parameter 'availabilityRequest' when calling availabilityUsersAvailabilityPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailabilityResponse;
      return this.apiClient.callApi(
        '/users/availability', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editMeUsersMePatch operation.
     * @callback module:api/UsersApi~editMeUsersMePatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Me
     * Updates user info
     * @param {module:model/NewInfo} newInfo 
     * @param {module:api/UsersApi~editMeUsersMePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    editMeUsersMePatch(newInfo, callback) {
      let postBody = newInfo;
      // verify the required parameter 'newInfo' is set
      if (newInfo === undefined || newInfo === null) {
        throw new Error("Missing the required parameter 'newInfo' when calling editMeUsersMePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeUsersMeGet operation.
     * @callback module:api/UsersApi~getMeUsersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Me
     * Gets information for user who sent the request
     * @param {module:api/UsersApi~getMeUsersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getMeUsersMeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsersUsernameGet operation.
     * @callback module:api/UsersApi~getUserUsersUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Gets information for the specified username.
     * @param {String} username 
     * @param {module:api/UsersApi~getUserUsersUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserUsersUsernameGet(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserUsersUsernameGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUsersRegisterPost operation.
     * @callback module:api/UsersApi~registerUsersRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register
     * Register for an account. To be called after obtaining a verification code by calling `/verify-email`.
     * @param {module:model/RegistrationRequest} registrationRequest 
     * @param {module:api/UsersApi~registerUsersRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    registerUsersRegisterPost(registrationRequest, callback) {
      let postBody = registrationRequest;
      // verify the required parameter 'registrationRequest' is set
      if (registrationRequest === undefined || registrationRequest === null) {
        throw new Error("Missing the required parameter 'registrationRequest' when calling registerUsersRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyEmailUsersVerifyEmailPost operation.
     * @callback module:api/UsersApi~verifyEmailUsersVerifyEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Email
     * Attempts to send an email containing a verification code to the provided address.
     * @param {module:model/Email} email 
     * @param {module:api/UsersApi~verifyEmailUsersVerifyEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    verifyEmailUsersVerifyEmailPost(email, callback) {
      let postBody = email;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling verifyEmailUsersVerifyEmailPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/users/verify-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
