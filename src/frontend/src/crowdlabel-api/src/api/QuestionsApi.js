/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Answer from '../model/Answer';
import BodyCreateAnswerQuestionsPost from '../model/BodyCreateAnswerQuestionsPost';
import ErrorResponse from '../model/ErrorResponse';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Questions service.
* @module api/QuestionsApi
* @version 0.1.0
*/
export default class QuestionsApi {

    /**
    * Constructs a new QuestionsApi. 
    * @alias module:api/QuestionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAnswerQuestionsPost operation.
     * @callback module:api/QuestionsApi~createAnswerQuestionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Answer
     * @param {Number} taskId 
     * @param {Number} questionId 
     * @param {module:model/BodyCreateAnswerQuestionsPost} bodyCreateAnswerQuestionsPost 
     * @param {module:api/QuestionsApi~createAnswerQuestionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Answer}
     */
    createAnswerQuestionsPost(taskId, questionId, bodyCreateAnswerQuestionsPost, callback) {
      let postBody = bodyCreateAnswerQuestionsPost;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling createAnswerQuestionsPost");
      }
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling createAnswerQuestionsPost");
      }
      // verify the required parameter 'bodyCreateAnswerQuestionsPost' is set
      if (bodyCreateAnswerQuestionsPost === undefined || bodyCreateAnswerQuestionsPost === null) {
        throw new Error("Missing the required parameter 'bodyCreateAnswerQuestionsPost' when calling createAnswerQuestionsPost");
      }

      let pathParams = {
        'task_id': taskId,
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Answer;
      return this.apiClient.callApi(
        '/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionQuestionsQuestionsQuestionIdGet operation.
     * @callback module:api/QuestionsApi~getQuestionQuestionsQuestionsQuestionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Question
     * @param {Number} questionId 
     * @param {Number} taskId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Object>} opts.requestBody 
     * @param {module:api/QuestionsApi~getQuestionQuestionsQuestionsQuestionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getQuestionQuestionsQuestionsQuestionIdGet(questionId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getQuestionQuestionsQuestionsQuestionIdGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getQuestionQuestionsQuestionsQuestionIdGet");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
        'task_id': taskId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/questions/questions/{question_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
