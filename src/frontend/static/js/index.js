/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Answer from './model/Answer';
import AvailabilityRequest from './model/AvailabilityRequest';
import AvailabilityResponse from './model/AvailabilityResponse';
import BadRegistrationResponse from './model/BadRegistrationResponse';
import BodyCreateAnswerQuestionsPost from './model/BodyCreateAnswerQuestionsPost';
import Email from './model/Email';
import ErrorResponse from './model/ErrorResponse';
import GoodRegistrationResponse from './model/GoodRegistrationResponse';
import HTTPValidationError from './model/HTTPValidationError';
import LocationInner from './model/LocationInner';
import Question from './model/Question';
import RegistrationRequest from './model/RegistrationRequest';
import Task from './model/Task';
import TasksRequest from './model/TasksRequest';
import TasksResponse from './model/TasksResponse';
import Token from './model/Token';
import User from './model/User';
import ValidationError from './model/ValidationError';
import AuthApi from './api/AuthApi';
import QuestionsApi from './api/QuestionsApi';
import TasksApi from './api/TasksApi';
import UsersApi from './api/UsersApi';


/**
* API for CrowdLabel.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CrowdLabelApi = require('index'); // See note below*.
* var xxxSvc = new CrowdLabelApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CrowdLabelApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CrowdLabelApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CrowdLabelApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Answer model constructor.
     * @property {module:model/Answer}
     */
    Answer,

    /**
     * The AvailabilityRequest model constructor.
     * @property {module:model/AvailabilityRequest}
     */
    AvailabilityRequest,

    /**
     * The AvailabilityResponse model constructor.
     * @property {module:model/AvailabilityResponse}
     */
    AvailabilityResponse,

    /**
     * The BadRegistrationResponse model constructor.
     * @property {module:model/BadRegistrationResponse}
     */
    BadRegistrationResponse,

    /**
     * The BodyCreateAnswerQuestionsPost model constructor.
     * @property {module:model/BodyCreateAnswerQuestionsPost}
     */
    BodyCreateAnswerQuestionsPost,

    /**
     * The Email model constructor.
     * @property {module:model/Email}
     */
    Email,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The GoodRegistrationResponse model constructor.
     * @property {module:model/GoodRegistrationResponse}
     */
    GoodRegistrationResponse,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The LocationInner model constructor.
     * @property {module:model/LocationInner}
     */
    LocationInner,

    /**
     * The Question model constructor.
     * @property {module:model/Question}
     */
    Question,

    /**
     * The RegistrationRequest model constructor.
     * @property {module:model/RegistrationRequest}
     */
    RegistrationRequest,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The TasksRequest model constructor.
     * @property {module:model/TasksRequest}
     */
    TasksRequest,

    /**
     * The TasksResponse model constructor.
     * @property {module:model/TasksResponse}
     */
    TasksResponse,

    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
    * The AuthApi service constructor.
    * @property {module:api/AuthApi}
    */
    AuthApi,

    /**
    * The QuestionsApi service constructor.
    * @property {module:api/QuestionsApi}
    */
    QuestionsApi,

    /**
    * The TasksApi service constructor.
    * @property {module:api/TasksApi}
    */
    TasksApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
